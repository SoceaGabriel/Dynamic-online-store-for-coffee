-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-11-11 23:01:47 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g


-----------------------------------------------------------TABELA PRODUSE-------------------------------------------------------
CREATE TABLE produse ( 
--  -codul produsului trebuie sa fie unic si generat automat: incepe de la 1 si
--  se incrementeaza cu 1 la fiecare produs adaugat
--  -constrangere PRIMARY KEY
    cod_produs           NUMBER(5) NOT NULL, 
--  -constrangere NOT NULL
    nume_cafea           VARCHAR2(100) NOT NULL, 
--  -constrangere NOT NULL
--  -constrangere CECK IN(cafea_boabe, cafea_macinata, cafea_instant,
--  cafea_paduri, cafea_capsule)
    tip_cafea            VARCHAR2(100) NOT NULL, 
--  -constrangere NOT NULL
--  -constrangere CECK IN(slab, slab-mediu, mediu, mediu-intens, intens)
    grad_de_prajire      VARCHAR2(80) NOT NULL,
    descriere_produs     VARCHAR2(1000), 
--  -constrangere NOT NULL
--  -constrangere CECK(pret>0)
    pret                 NUMBER(5) NOT NULL, 
--  -constrangere NOT NULL
--  -constrangere CECK (cantitate>=0)
    cantitate            NUMBER(8) NOT NULL,
    nr_paduri            NUMBER(8),
    nr_capsule           NUMBER(8), 
--  -constrangere NOT NULL
--  -constrangere CECK (nr_buc_curente>=0)
    nr_buc_curente       NUMBER(8) NOT NULL, 
--  -constrangere NOT NULL
--  -constrangere CECK (nr_buc_vandute>=0)
    nr_bucati_vandute    NUMBER(8) NOT NULL, 
--  -constrangere NOT NULL
--  -constrangere CECK IN(yes, no)
    promotie             VARCHAR2(5) NOT NULL,
    pret_promotie        NUMBER(8),
    procentaj_reducere   NUMBER(3)
);

ALTER TABLE produse
    ADD CONSTRAINT ck_tip_cafea CHECK ( tip_cafea IN (
        'cafea_boabe',
        'cafea_capsule',
        'cafea_instant',
        'cafea_macinata',
        'cafea_paduri'
    ) );

ALTER TABLE produse
    ADD CONSTRAINT ck_grad_de_prajire CHECK ( grad_de_prajire IN (
        'intens',
        'mediu',
        'mediu-intens',
        'slab',
        'slab-mediu'
    ) );

ALTER TABLE produse ADD CONSTRAINT ck_pret CHECK ( pret > 0 );

ALTER TABLE produse ADD CONSTRAINT ck_cantitate CHECK ( cantitate >= 0 );

ALTER TABLE produse ADD CONSTRAINT ck_nr_buc_curente CHECK ( nr_buc_curente >= 0 );

ALTER TABLE produse ADD CONSTRAINT ck_nr_buc_vandute CHECK ( nr_bucati_vandute >= 0 );

ALTER TABLE produse
    ADD CONSTRAINT ck_promotie CHECK ( promotie IN (
        'no',
        'yes'
    ) );

ALTER TABLE produse ADD CONSTRAINT produse_pk PRIMARY KEY ( cod_produs );

ALTER TABLE produse ADD DATA_ACTUALIZARE date;

ALTER TABLE produse_comanda MODIFY (DATA_ACTUALIZARE NOT NULL);

CREATE SEQUENCE cod_produs_sequence START WITH 1000 MINVALUE 1000 MAXVALUE 10000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cod_produs_trigger BEFORE
    INSERT ON produse
    FOR EACH ROW
    WHEN ( new.cod_produs IS NULL )
BEGIN
    :new.cod_produs := cod_produs_sequence.nextval;
END;
/
-----------------------------------------------------------END TABELA PRODUSE---------------------------------------------------

-----------------------------------------------------------TABELA UTILIZATORI---------------------------------------------------
CREATE TABLE utilizatori ( 
--  -constrangere PRIMARY KEY
--  -aici sunt codurile unice ale utilizatorilor prin care acestia pot fi
--  identificati
    id_user      NUMBER(10) NOT NULL, 
--  -constrangerea NOT NULL
    nume         VARCHAR2(50) NOT NULL, 
--  -constrangerea NOT NULL
    prenume      VARCHAR2(100) NOT NULL, 
--  -constrangerea NOT NULL
--  -verificare lungimea sa nu fie mai mica de 6 caractere
    parola       VARCHAR2(500) NOT NULL, 
--  -constrangerea NOT NULL
--  -constrangerea CECK IN (admin, customer)
    rang_user    VARCHAR2(100) NOT NULL, 
--  -constrangerea NOT NULL
--  -constrangere UNIQUE KEY
    telefon      NUMBER(15) NOT NULL, 
--  -constrangerea NOT NULL
--  -constrangere UNIQUE KEY
--  -constrangere de verificare daca este email
    email        VARCHAR2(150) NOT NULL, 
--  -constrangerea NOT NULL
    localitate   VARCHAR2(100) NOT NULL, 
--  -constrangerea NOT NULL
    judet        VARCHAR2(40) NOT NULL,
    cod_postal   NUMBER(10), 
--  -constrangerea NOT NULL
    adresa       VARCHAR2(500) NOT NULL,
    nr_comenzi   NUMBER(10)
);

ALTER TABLE utilizatori
    ADD CONSTRAINT ck_length_parola CHECK ( length(parola) >= 6 );

ALTER TABLE utilizatori
    ADD CONSTRAINT ck_rang_user CHECK ( rang_user IN (
        'admin',
        'customer'
    ) );

--ALTER TABLE utilizatori DROP CONSTRAINT ck_format_email;

ALTER TABLE utilizatori ADD CONSTRAINT ck_format_email CHECK ( REGEXP_LIKE ( email,'[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );
						
ALTER TABLE utilizatori ADD CONSTRAINT utilizatori_pk PRIMARY KEY ( id_user );

ALTER TABLE utilizatori ADD CONSTRAINT utilizatori_telefon_un UNIQUE ( telefon );

ALTER TABLE utilizatori ADD CONSTRAINT utilizatori_email_un UNIQUE ( email );

CREATE SEQUENCE utilizatori_id_user_seq START WITH 11000 MINVALUE 11000 MAXVALUE 1000000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER utilizatori_id_user_trg BEFORE
    INSERT ON utilizatori
    FOR EACH ROW
    WHEN ( new.id_user IS NULL )
BEGIN
    :new.id_user := utilizatori_id_user_seq.nextval;
END;
/
-------------------------------------------------------END TABELA UTILIZATORI---------------------------------------------------

-------------------------------------------------------TABELA COS CUMPARATURI---------------------------------------------------
CREATE TABLE cos_cumparaturi (
    nr_curent             NUMBER(8) NOT NULL,
    nr_buc                NUMBER(5) NOT NULL, 
--  -constrangere PRIMARY KEY
--  -aici sunt codurile unice ale utilizatorilor prin care acestia pot fi
--  identificati
    utilizatori_id_user   NUMBER(10) NOT NULL, 
--  -codul produsului trebuie sa fie unic si generat automat: incepe de la 1 si
--  se incrementeaza cu 1 la fiecare produs adaugat
--  -constrangere PRIMARY KEY
    produse_cod_produs    NUMBER(5) NOT NULL
);

ALTER TABLE cos_cumparaturi ADD data_adaugare DATE not null;

COMMENT ON COLUMN cos_cumparaturi.nr_curent IS
    '-constraint PRIMARY KEY
-autoincrement de la 1';

COMMENT ON COLUMN cos_cumparaturi.nr_buc IS
    '-constrangerea NOT NULL';

ALTER TABLE cos_cumparaturi ADD CONSTRAINT cos_cumparaturi_pk PRIMARY KEY ( nr_curent );

ALTER TABLE cos_cumparaturi
    ADD CONSTRAINT cos_cumparaturi_produse_fk FOREIGN KEY ( produse_cod_produs )
        REFERENCES produse ( cod_produs );

ALTER TABLE cos_cumparaturi
    ADD CONSTRAINT cos_cumparaturi_utilizatori_fk FOREIGN KEY ( utilizatori_id_user )
        REFERENCES utilizatori ( id_user );
        
 CREATE SEQUENCE cos_cumparaturi_nr_curent_seq START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER cos_cumparaturi_nr_curent_trg BEFORE
    INSERT ON cos_cumparaturi
    FOR EACH ROW
    WHEN ( new.nr_curent IS NULL )
BEGIN
    :new.nr_curent := cos_cumparaturi_nr_curent_seq.nextval;
END;
/       
------------------------------------------------------END TABELA COS CUMPARATURI------------------------------------------------

-------------------------------------------------------TABELA ISTORIC COMENZI---------------------------------------------------
CREATE TABLE istoric_comenzi (
    nr_curent             NUMBER(10) NOT NULL,
    nr_bucati_cumparate   NUMBER(10) NOT NULL,
    data_comanda          DATE NOT NULL, 
--  -constrangere PRIMARY KEY
--  -aici sunt codurile unice ale utilizatorilor prin care acestia pot fi
--  identificati
    utilizatori_id_user   NUMBER(10) NOT NULL, 
--  -codul produsului trebuie sa fie unic si generat automat: incepe de la 1 si
--  se incrementeaza cu 1 la fiecare produs adaugat
--  -constrangere PRIMARY KEY
    produse_cod_produs    NUMBER(5) NOT NULL
);

COMMENT ON COLUMN istoric_comenzi.nr_curent IS
    '-constrangerea PRIMARY KEY
-autoincrement de la 1';

COMMENT ON COLUMN istoric_comenzi.nr_bucati_cumparate IS
    '-constrangerea NOT NULL';

COMMENT ON COLUMN istoric_comenzi.data_comanda IS
    '-constrangerea NOT NULL';

ALTER TABLE istoric_comenzi ADD CONSTRAINT istoric_comenzi_pk PRIMARY KEY ( nr_curent );

ALTER TABLE istoric_comenzi ADD ID_COMANDA NUMBER(10);

ALTER TABLE istoric_comenzi
    ADD CONSTRAINT istoric_comenzi_produse_fk FOREIGN KEY ( produse_cod_produs )
        REFERENCES produse ( cod_produs );

ALTER TABLE istoric_comenzi
    ADD CONSTRAINT istoric_comenzi_fk FOREIGN KEY ( utilizatori_id_user )
        REFERENCES utilizatori ( id_user );
        
CREATE SEQUENCE nr_curent_sequence START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER nr_curent_trigger BEFORE
    INSERT ON istoric_comenzi
    FOR EACH ROW
    WHEN ( new.nr_curent IS NULL )
BEGIN
    :new.nr_curent := nr_curent_sequence.nextval;
END;
/
-----------------------------------------------------END TABELA ISTORIC COMENZI-------------------------------------------------
        
-------------------------------------------------------TABELA COMENZI CURENTE---------------------------------------------------
CREATE TABLE comenzi_curente ( 
--  -constrangere PRIMARY KEY
--  -autoincrement cu valori de la 100
    id_comanda       NUMBER(10) NOT NULL, 
--  -constrangerea NOT NULL
    id_user          NUMBER(10) NOT NULL, 
--  -constrangerea NOT NULL
--  -constrangerea CECK IN (camanda_neprocesata, procesare_comanda,
--  trimisa_la_curier, in_curs_de_livrare, comanda_finalizata)
    status_comanda   VARCHAR2(200) NOT NULL, 
--  -constrangerea NOT NULL
    data_comanda     DATE NOT NULL
);

ALTER TABLE comenzi_curente
    ADD CONSTRAINT ck_status_comanda CHECK ( status_comanda IN (
        'comanda_finalizata',
        'comanda_neprocesata',
        'in_curs_de_livrare',
        'procesare_comanda',
        'trimisa_la_curier'
    ) );

ALTER TABLE comenzi_curente ADD CONSTRAINT comenzi_curente_pk PRIMARY KEY ( id_comanda );

CREATE SEQUENCE id_comanda_sequence START WITH 100 MINVALUE 100 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_comanda_trigger BEFORE
    INSERT ON comenzi_curente
    FOR EACH ROW
    WHEN ( new.id_comanda IS NULL )
BEGIN
    :new.id_comanda := id_comanda_sequence.nextval;
END;
/
-----------------------------------------------------END TABELA COMENZI CURENTE-------------------------------------------------

-------------------------------------------------------TABELA PRODUSE COMANDA---------------------------------------------------
CREATE TABLE produse_comanda (
    cod_produs_comandat          NUMBER(8) NOT NULL,
    nr_bucati_comandate          NUMBER(8) NOT NULL, 
--  -constrangere PRIMARY KEY
--  -autoincrement cu valori de la 100
    comenzi_curente_id_comanda   NUMBER(10) NOT NULL
);

COMMENT ON COLUMN produse_comanda.cod_produs_comandat IS
    '-constrangerea NOT NULL';

COMMENT ON COLUMN produse_comanda.nr_bucati_comandate IS
    '-constrangerea NOT NULL';

ALTER TABLE produse_comanda ADD ID_PROD_COM NUMBER(10);

ALTER TABLE produse_comanda MODIFY (ID_PROD_COM NOT NULL);

ALTER TABLE produse_comanda ADD CONSTRAINT produse_comanda_pk PRIMARY KEY ( ID_PROD_COM );

CREATE SEQUENCE id_prod_com_sequence START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_com_prod_trigger BEFORE
    INSERT ON produse_comanda
    FOR EACH ROW
    WHEN ( new.ID_PROD_COM IS NULL )
BEGIN
    :new.ID_PROD_COM := id_prod_com_sequence.nextval;
END;
/

ALTER TABLE produse_comanda
    ADD CONSTRAINT comenzi_curente_fk FOREIGN KEY ( comenzi_curente_id_comanda )
        REFERENCES comenzi_curente ( id_comanda ) ON DELETE CASCADE;
---------------------------------------------------END TABELA PRODUSE COMANDA---------------------------------------------------

---------------------------------------------------TABELA PATH_IMAGINI----------------------------------------------------------
CREATE TABLE path_imagini (
    path                 VARCHAR2(1000) NOT NULL,
    alt                  VARCHAR2(1000),
    title                VARCHAR2(200), 
--  -codul produsului trebuie sa fie unic si generat automat: incepe de la 1 si
--  se incrementeaza cu 1 la fiecare produs adaugat
--  -constrangere PRIMARY KEY
    produse_cod_produs   NUMBER(5) NOT NULL
);

COMMENT ON COLUMN path_imagini.path IS
    '--calea imaginii';

COMMENT ON COLUMN path_imagini.alt IS
    '--camp pentru tagul alt de la imagini';

COMMENT ON COLUMN path_imagini.title IS
    '--titlul imaginii folosit in atributul totle din html';
    
ALTER TABLE path_imagini
    ADD CONSTRAINT path_imagini_produse_fk FOREIGN KEY ( produse_cod_produs )
        REFERENCES produse ( cod_produs );

ALTER TABLE PATH_IMAGINI ADD ID_PATH NUMBER(10) NOT NULL;

ALTER TABLE PATH_IMAGINI ADD CONSTRAINT path_imagini_pk PRIMARY KEY ( ID_PATH );

CREATE SEQUENCE id_path_sequence START WITH 1 MINVALUE 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER id_path_trigger BEFORE
    INSERT ON PATH_IMAGINI
    FOR EACH ROW
    WHEN ( new.ID_PATH IS NULL )
BEGIN
    :new.ID_PATH := id_path_sequence.nextval;
END;
/

---------------------------------------------------END TABELA PATH_IMAGINI------------------------------------------------------
-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             0
-- ALTER TABLE                             23
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           5
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          5
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   1
-- WARNINGS                                 0
