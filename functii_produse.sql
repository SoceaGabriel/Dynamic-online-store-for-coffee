-----------------------------------------------PACHET TABELA PRODUSE------------------------------------------------------------
create or replace PACKAGE PRODUSE_FUNC IS

PROCEDURE INSERT_PRODUSE_ALL(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE, 
                            TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE,
                            GRAD_PRAJIRE IN PRODUSE.GRAD_DE_PRAJIRE%TYPE,
                            DESCRIERE_PROD IN PRODUSE.DESCRIERE_PRODUS%TYPE,
                            PRETT IN PRODUSE.PRET%TYPE,
                            CANT IN PRODUSE.CANTITATE%TYPE,
                            NR_PAD IN PRODUSE.NR_PADURI%TYPE,
                            NR_CAPS IN PRODUSE.NR_CAPSULE%TYPE,
                            NR_BUC_CRT IN PRODUSE.NR_BUC_CURENTE%TYPE,
                            NR_BUC_VND IN PRODUSE.NR_BUCATI_VANDUTE%TYPE,
                            PROM IN PRODUSE.PROMOTIE%TYPE,
                            PROCENTAJ_RED IN PRODUSE.PROCENTAJ_REDUCERE%TYPE,
                            DATA_ADD IN PRODUSE.DATA_ACTUALIZARE%TYPE);

PROCEDURE INSERT_PRODUSE_NOT_NULL(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE,
                                TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE,
                                GRAD_PRAJIRE IN PRODUSE.GRAD_DE_PRAJIRE%TYPE,
                                PRETT IN PRODUSE.PRET%TYPE,
                                CANT IN PRODUSE.CANTITATE%TYPE,
                                NR_BUC_CRT IN PRODUSE.NR_BUC_CURENTE%TYPE,
                                NR_BUC_VND IN PRODUSE.NR_BUCATI_VANDUTE%TYPE,
                                PROM IN PRODUSE.PROMOTIE%TYPE);

PROCEDURE UPDATE_NUME_CAFEA(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_TIP_CAFEA(TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_GRAD_PRAJIRE(GR_PR IN PRODUSE.GRAD_DE_PRAJIRE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_DESC_PROD(DESCRIERE IN PRODUSE.DESCRIERE_PRODUS%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_PRET(PRT IN PRODUSE.PRET%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_CANTITATE(CANT IN PRODUSE.CANTITATE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_NR_PADURI(PAD IN PRODUSE.NR_PADURI%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_NR_CAPSULE(CAPS IN PRODUSE.NR_CAPSULE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_NR_BUC_CURENTE(BUC IN PRODUSE.NR_BUC_CURENTE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_NR_BUC_VANDUTE(PAD IN PRODUSE.NR_BUCATI_VANDUTE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_PROMOTIE(PROM IN PRODUSE.PROMOTIE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_PRET_PROMOTIE(PRET_PROM IN PRODUSE.PRET_PROMOTIE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_PROCENTAJ_REDUCERE(PR_RED IN PRODUSE.PROCENTAJ_REDUCERE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE UPDATE_DATA_ACTUALIZARE(DATA_ACT IN PRODUSE.DATA_ACTUALIZARE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE DELETE_ROW_COD_PRODUS(COD_PROD IN PRODUSE.COD_PRODUS%TYPE);

TYPE RC_PRODUSE IS REF CURSOR;
PROCEDURE SELECT_PRODUSE(CURS OUT RC_PRODUSE);

PROCEDURE TOTAL_PRODUSE(TOTAL OUT NUMBER);

PROCEDURE TOTAL_CAT(TIP_CFA IN PRODUSE.TIP_CAFEA%TYPE, TOTAL_TIP OUT NUMBER);

PROCEDURE SELECT_PRODUS_COD(COD_PR IN PRODUSE.COD_PRODUS%TYPE, CURSO OUT RC_PRODUSE);

PROCEDURE ACTUALIZARE_STOC(CANT IN PRODUSE.CANTITATE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE);

PROCEDURE VERIFICARE_DATA_ADAUGARE_PROD(DATA_A IN PRODUSE.DATA_ACTUALIZARE%TYPE, REZ OUT NUMBER);

PROCEDURE VERIFICARE_DATA_MOD_PROD(DATA_OLD IN PRODUSE.DATA_ACTUALIZARE%TYPE, DATA_NEW IN PRODUSE.DATA_ACTUALIZARE%TYPE, REZ OUT NUMBER);

END PRODUSE_FUNC;
/

create or replace PACKAGE BODY PRODUSE_FUNC IS
V_PRET_RED PRODUSE.PRET_PROMOTIE%TYPE;
PROCEDURE INSERT_PRODUSE_ALL(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE, 
                            TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE,
                            GRAD_PRAJIRE IN PRODUSE.GRAD_DE_PRAJIRE%TYPE,
                            DESCRIERE_PROD IN PRODUSE.DESCRIERE_PRODUS%TYPE,
                            PRETT IN PRODUSE.PRET%TYPE,
                            CANT IN PRODUSE.CANTITATE%TYPE,
                            NR_PAD IN PRODUSE.NR_PADURI%TYPE,
                            NR_CAPS IN PRODUSE.NR_CAPSULE%TYPE,
                            NR_BUC_CRT IN PRODUSE.NR_BUC_CURENTE%TYPE,
                            NR_BUC_VND IN PRODUSE.NR_BUCATI_VANDUTE%TYPE,
                            PROM IN PRODUSE.PROMOTIE%TYPE,
                            PROCENTAJ_RED IN PRODUSE.PROCENTAJ_REDUCERE%TYPE,
                            DATA_ADD IN PRODUSE.DATA_ACTUALIZARE%TYPE) IS
BEGIN
    V_PRET_RED := PRETT - (PROCENTAJ_RED * PRETT)/100;
    INSERT INTO PRODUSE(NUME_CAFEA, 
                        TIP_CAFEA, 
                        GRAD_DE_PRAJIRE, 
                        DESCRIERE_PRODUS, 
                        PRET, CANTITATE,
                        NR_PADURI, 
                        NR_CAPSULE, 
                        NR_BUC_CURENTE, 
                        NR_BUCATI_VANDUTE, 
                        PROMOTIE,
                        PRET_PROMOTIE,
                        PROCENTAJ_REDUCERE,
                        DATA_ACTUALIZARE)
            VALUES(NUME_CAF,
                    TIP_CAF,
                    GRAD_PRAJIRE,
                    DESCRIERE_PROD,
                    PRETT,
                    CANT,
                    NR_PAD,
                    NR_CAPS,
                    NR_BUC_CRT,
                    NR_BUC_VND,
                    PROM,
                    V_PRET_RED,
                    PROCENTAJ_RED,
                    TO_DATE(DATA_ADD,'DD-MM-YYYY'));
    commit;
END INSERT_PRODUSE_ALL;

PROCEDURE INSERT_PRODUSE_NOT_NULL(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE,
                                TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE,
                                GRAD_PRAJIRE IN PRODUSE.GRAD_DE_PRAJIRE%TYPE,
                                PRETT IN PRODUSE.PRET%TYPE,
                                CANT IN PRODUSE.CANTITATE%TYPE,
                                NR_BUC_CRT IN PRODUSE.NR_BUC_CURENTE%TYPE,
                                NR_BUC_VND IN PRODUSE.NR_BUCATI_VANDUTE%TYPE,
                                PROM IN PRODUSE.PROMOTIE%TYPE) IS
BEGIN
    INSERT INTO PRODUSE(NUME_CAFEA,
                        TIP_CAFEA,
                        GRAD_DE_PRAJIRE,
                        PRET,
                        CANTITATE,
                        NR_BUC_CURENTE,
                        NR_BUCATI_VANDUTE,
                        PROMOTIE)
                        VALUES(NUME_CAF,
                                TIP_CAF,
                                GRAD_PRAJIRE,
                                PRETT,
                                CANT,
                                NR_BUC_CRT,
                                NR_BUC_VND,
                                PROM);
    commit;
END INSERT_PRODUSE_NOT_NULL;

PROCEDURE UPDATE_NUME_CAFEA(NUME_CAF IN PRODUSE.NUME_CAFEA%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NUME_CAFEA = NUME_CAF WHERE COD_PRODUS = COD;
    commit;
END UPDATE_NUME_CAFEA;

PROCEDURE UPDATE_TIP_CAFEA(TIP_CAF IN PRODUSE.TIP_CAFEA%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET TIP_CAFEA = TIP_CAF WHERE COD_PRODUS = COD;
    commit;
END UPDATE_TIP_CAFEA;

PROCEDURE UPDATE_GRAD_PRAJIRE(GR_PR IN PRODUSE.GRAD_DE_PRAJIRE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET GRAD_DE_PRAJIRE = GR_PR WHERE COD_PRODUS = COD;
    commit;
END UPDATE_GRAD_PRAJIRE;

PROCEDURE UPDATE_DESC_PROD(DESCRIERE IN PRODUSE.DESCRIERE_PRODUS%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET DESCRIERE_PRODUS = DESCRIERE WHERE COD_PRODUS = COD;
    commit;
END UPDATE_DESC_PROD;

PROCEDURE UPDATE_PRET(PRT IN PRODUSE.PRET%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET PRET = PRT WHERE COD_PRODUS = COD;
    commit;
END UPDATE_PRET;

PROCEDURE UPDATE_CANTITATE(CANT IN PRODUSE.CANTITATE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET CANTITATE = CANT WHERE COD_PRODUS = COD;
    commit;
END UPDATE_CANTITATE;

PROCEDURE UPDATE_NR_PADURI(PAD IN PRODUSE.NR_PADURI%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NR_PADURI = PAD WHERE COD_PRODUS = COD;
    commit;
END UPDATE_NR_PADURI;

PROCEDURE UPDATE_NR_CAPSULE(CAPS IN PRODUSE.NR_CAPSULE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NR_CAPSULE = CAPS WHERE COD_PRODUS = COD;
    commit;
END UPDATE_NR_CAPSULE;

PROCEDURE UPDATE_NR_BUC_CURENTE(BUC IN PRODUSE.NR_BUC_CURENTE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NR_BUC_CURENTE = BUC WHERE COD_PRODUS = COD;
    commit;
END UPDATE_NR_BUC_CURENTE;

PROCEDURE UPDATE_NR_BUC_VANDUTE(PAD IN PRODUSE.NR_BUCATI_VANDUTE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NR_BUCATI_VANDUTE = PAD WHERE COD_PRODUS = COD;
    commit;
END UPDATE_NR_BUC_VANDUTE;

PROCEDURE UPDATE_PROMOTIE(PROM IN PRODUSE.PROMOTIE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET PROMOTIE = PROM WHERE COD_PRODUS = COD;
    commit;
END UPDATE_PROMOTIE;

PROCEDURE UPDATE_PRET_PROMOTIE(PRET_PROM IN PRODUSE.PRET_PROMOTIE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET PRET_PROMOTIE = PRET_PROM WHERE COD_PRODUS = COD;
    commit;
END UPDATE_PRET_PROMOTIE;

PROCEDURE UPDATE_PROCENTAJ_REDUCERE(PR_RED IN PRODUSE.PROCENTAJ_REDUCERE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET PROCENTAJ_REDUCERE = PR_RED WHERE COD_PRODUS = COD;
    UPDATE PRODUSE SET PRET_PROMOTIE = PRET - (PR_RED*PRET)/100 WHERE COD_PRODUS = COD;
    commit;
END UPDATE_PROCENTAJ_REDUCERE;

PROCEDURE UPDATE_DATA_ACTUALIZARE(DATA_ACT IN PRODUSE.DATA_ACTUALIZARE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET DATA_ACTUALIZARE = TO_DATE(DATA_ACT,'DD-MM-YYYY') WHERE COD_PRODUS = COD;
    commit;
END UPDATE_DATA_ACTUALIZARE;

PROCEDURE DELETE_ROW_COD_PRODUS(COD_PROD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    DELETE FROM PRODUSE WHERE COD_PRODUS = COD_PROD;
    commit;
END DELETE_ROW_COD_PRODUS;

PROCEDURE SELECT_PRODUSE(CURS OUT RC_PRODUSE) IS
BEGIN
    OPEN CURS FOR SELECT * FROM PRODUSE;
END SELECT_PRODUSE;

PROCEDURE TOTAL_PRODUSE(TOTAL OUT NUMBER) IS
BEGIN
    SELECT COUNT(*) INTO TOTAL FROM PRODUSE;
END TOTAL_PRODUSE;

PROCEDURE TOTAL_CAT(TIP_CFA IN PRODUSE.TIP_CAFEA%TYPE, TOTAL_TIP OUT NUMBER) IS
BEGIN
    SELECT COUNT(*) INTO TOTAL_TIP FROM PRODUSE WHERE TIP_CAFEA = TIP_CFA;
END TOTAL_CAT;


PROCEDURE SELECT_PRODUS_COD(COD_PR IN PRODUSE.COD_PRODUS%TYPE, CURSO OUT RC_PRODUSE) IS
BEGIN
    OPEN CURSO FOR SELECT * FROM PRODUSE WHERE COD_PRODUS = COD_PR;
END;

PROCEDURE ACTUALIZARE_STOC(CANT IN PRODUSE.CANTITATE%TYPE, COD IN PRODUSE.COD_PRODUS%TYPE) IS
BEGIN
    UPDATE PRODUSE SET NR_BUC_CURENTE = NR_BUC_CURENTE + CANT WHERE COD_PRODUS = COD;
    commit;
END;

PROCEDURE VERIFICARE_DATA_ADAUGARE_PROD(DATA_A IN PRODUSE.DATA_ACTUALIZARE%TYPE, REZ OUT NUMBER) IS
BEGIN
    IF DATA_A <= SYSDATE THEN
        REZ := 1;
    ELSE 
        REZ := 0;
    END IF;
END VERIFICARE_DATA_ADAUGARE_PROD;

PROCEDURE VERIFICARE_DATA_MOD_PROD(DATA_OLD IN PRODUSE.DATA_ACTUALIZARE%TYPE, DATA_NEW IN PRODUSE.DATA_ACTUALIZARE%TYPE, REZ OUT NUMBER) IS
BEGIN
    IF DATA_NEW >= DATA_OLD AND DATA_NEW <= SYSDATE THEN
        REZ := 1;
    ELSE 
        REZ := 0;
    END IF;
END VERIFICARE_DATA_MOD_PROD;

END PRODUSE_FUNC;
/
